%token NUMBER
%left '+' '-'
%left '*' '/'
%left '(' ')'

%union {
    int num;
    struct TreeNode* node;
}

%token <num> NUM_TOKEN

%%

calc : expr { printf("Result = %d\n", $1->num); 
              printTree($1, 0);
              return 0;
            };

expr : expr '+' term { $$ = createNode('+', $1, $3); }
     | expr '-' term { $$ = createNode('-', $1, $3); }
     | term { $$ = $1; }
     ;

term : term '' factor { $$ = createNode('', $1, $3); }
     | term '/' factor { $$ = createNode('/', $1, $3); }
     | factor { $$ = $1; }
     ;

factor : '(' expr ')' { $$ = $2; }
       | NUMBER { $$ = createLeaf($1); }
       ;

%%

struct TreeNode {
    char op;  // Operator: '+', '-', '*', '/', or 0 for leaf nodes
    int num;  // Operand value for leaf nodes
    struct TreeNode *left;  // Left child
    struct TreeNode *right; // Right child
};

struct TreeNode* createNode(char op, struct TreeNode* left, struct TreeNode* right) {
    struct TreeNode* node = malloc(sizeof(struct TreeNode));
    node->op = op;
    node->left = left;
    node->right = right;
    return node;
}

struct TreeNode* createLeaf(int num) {
    struct TreeNode* leaf = malloc(sizeof(struct TreeNode));
    leaf->op = 0;
    leaf->num = num;
    leaf->left = NULL;
    leaf->right = NULL;
    return leaf;
}

void printTree(struct TreeNode* root, int level) {
    if (root != NULL) {
        for (int i = 0; i < level; i++) {
            printf("  ");
        }
        if (root->op == 0) {
            printf("%d\n", root->num);
        } else {
            printf("%c\n", root->op);
        }
        printTree(root->left, level + 1);
        printTree(root->right, level + 1);
    }
}

void main() {
    printf("\nEnter Any Arithmetic Expression :\n");
    yyparse();
}

void yyerror() {
    printf("\nEntered arithmetic expression is Invalid\n\n");
    flag = 1;
}
